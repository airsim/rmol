/*! 
\page linking Linking with IT++

\section toc Table of Contents
- \ref intro
- \ref pkgconfig
- \ref itppconfig
- \ref dynamiclinking


\section intro Introduction

Since version 3.9.0, there are two convenient methods of linking your
programs with the IT++ library. The first one employs the \c
`pkg-config' command (see <a href="http://pkgconfig.freedesktop.org/">
http://pkgconfig.freedesktop.org/</a>), wheres the second one uses \c
`itpp-config' script. These methods are shortly described below.


\section pkgconfig Using the pkg-config command

\c `pkg-config' is a helper tool used when compiling applications and
libraries. It helps you insert the correct compiler and linker
options. The syntax of the \c `pkg-config' is as follows:

\code
% pkg-config <options> <library_name>  
\endcode

For instance, assuming that you need to compile an IT++ based program
<tt>`my_prog.cpp'</tt>, you should use the following command:

\code
% g++ `pkg-config --cflags itpp` -o my_prog my_prog.cpp `pkg-config --libs itpp`
\endcode  

For more information see the \c `pkg-config' man pages.


\section itppconfig Using the itpp-config script

IT++ provides a shell script called \c `itpp-config`, which is
installed by default in <tt>`$prefix/bin'</tt>
(<tt>`/usr/local/bin'</tt>) directory. It can be used to simplify
compilation and linking of IT++ based programs. The usage of this
script is quite similar to the usage of the \c `pkg-config' command.

Assuming that you need to compile the program <tt>`my_prog.cpp'</tt>
you can now do that with the following command:

\code
% g++ `itpp-config --cflags` -o my_prog my_prog.cpp `itpp-config --libs`
\endcode

If you would like to use the same optimisation flags (CXXFLAGS), as those
used for compiling the IT++ library, you might try the following command:

\code
% g++ `itpp-config --cflags-opt` -o my_prog_opt my_prog.cpp `itpp-config --libs-opt`
\endcode

Moreover, if you compiled and installed the \c `libitpp_debug.*' library by
using \c `--enable-debug' swich to configure, you can compile and link your
program with debugging options using the following command instead:

\code
% g++ `itpp-config --cflags-debug` -o my_prog_debug my_prog.cpp `itpp-config --libs-debug`
\endcode

A list of \c `itpp-config' options can be obtained by typing:

\code
% itpp-config --help
\endcode

If the \c `itpp-config' command is not found by your shell, you should add
its location <tt>`$prefix/bin'</tt> to the PATH environment variable, e.g.:

\code
% export PATH=/usr/local/bin:$PATH
\endcode


\section dynamiclinking Using IT++ with dynamic linking

When using static linking some of the library routines in IT++ are
copied into your executable program. This can lead to unnecessary
large executables. To avoid having too large executable files you may
use dynamic linking instead. Dynamic linking means that the actual
linking is performed when the program is executed. This requires that
the system is able to locate the shared IT++ library file during your
program execution. If you install the IT++ library using a non-standard
prefix, the \c `LD_LIBRARY_PATH' environment variable might be used to
inform the linker of the dynamic library location, e.g.:
\code
export LD_LIBRARY_PATH=<IT++ installation prefix>/lib:$LD_LIBRARY_PATH
\endcode

*/

=============================================
!!! The following parts has to be revised !!!
=============================================

\section matlab_load_and_save Information for Matlab users

In the IT++ \c matlab folder there are two m-files: \c `load_it.m' and
\c `save_it.m'.  These files are used for reading and writing IT++ data
files from and to Matlab. To ensure that Matlab finds these two files
you should add the following line to your \c ~/matlab/startup.m file:

\code
p=path; path(p,<Path to your IT++ directory>/matlab);
\endcode
