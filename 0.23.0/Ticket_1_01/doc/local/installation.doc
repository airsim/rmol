/*!
\page installation RMOL Installation

\section toc Table of Contents
- \ref requirements
- \ref download
- \ref compilation
- \ref macosx
- \ref msvc


\section requirements RMOL Requirements

If you have a RPM-based Linux distribution, note that RPM packages are
provided for the latest versions of Fedora (e.g., 10) on the <a
href="http://sourceforge.net/project/showfiles.php?group_id=177703">RMOL
project</a> download site. In that case, you do not have to bother
with the installation from source code.

Otherwise, RMOL should compile without errors or warnings on most
GNU/Linux systems, on UNIX systems like Solaris SunOS, and on POSIX
based environments for Microsoft Windows like Cygwin or MinGW with
MSYS. It can be also built on Microsoft Windows NT/2000/XP using
Microsoft's Visual C++ .NET, but our support for this compiler is
limited. For GNU/Linux, SunOS, Cygwin and MinGW we assume that you
have at least the following GNU software installed on your computer:
- <a href="http://www.gnu.org/software/make/">GNU make</a>, version 3.72.1
or later (check version with <tt>`make --version'</tt>)
- <a href="http://gcc.gnu.org/">GCC</a> - GNU Compilers Collection (gcc, g++
and g77 or gfortran), version 3.3.x or later (check version with <tt>`gcc
--version'</tt>)
.
To perform tests, two command line programs: \c sed and \c diff are
required. Optionally, you might need a few additional programs, i.e. 
<a href="http://www.doxygen.org/">Doxygen</a>, 
<a href="http://www.latex-project.org/">LaTeX</a>,
<a href="http://www.radicaleye.com/dvips.html">Dvips</a> and 
<a href="http://www.cs.wisc.edu/~ghost/">Ghostscript</a>, to generate the
HTML documentation. 

We strongly recommend that you use recent stable releases of the GCC, if
possible. We do not actively work on supporting older versions of the GCC,
and they may therefore (without prior notice) become unsupported in future
releases of RMOL.

In order to use all functionality provided by the RMOL library, it is
recommended that you have some external libraries compiled and installed in
your computer, namely:
<a href="http://www.gnu.org/software/gsl">GSL</a> and
<a href="http://www.boost.org">Boost</a>.


\section download Obtaining the RMOL Source Codes

RMOL is released under the Lesser GNU General Public License (LGPL)
and hence the source code of the RMOL library is available for free
download. To obtain the RMOL source code, visit the project pages on
SourceForge:
- <a
  href="http://sourceforge.net/projects/rmol">http://sourceforge.net/projects/rmol</a>
.
and download the file named \c rmol-\<VERSION\>.tar.gz or 
\c rmol-\<VERSION\>.tar.bz2, where \c \<VERSION\> is the latest release
number, e.g. 0.19.0.


\section compilation General RMOL Configuration, Compilation and Installation Instructions

Assuming that you have already downloaded the latest RMOL sources, untar
and unpack the sources, and enter the unpacked directory. Depending on the
package type you have downloaded, use the following commands:

\verbatim 
% gzip -cd rmol-<VERSION>.tar.gz | tar xf - 
% cd rmol-<VERSION> 
\endverbatim

\verbatim 
% bzip2 -cd rmol-<VERSION>.tar.bz2 | tar xf - 
% cd rmol-<VERSION> 
\endverbatim

Since version 0.2.0, the RMOL library uses autoconf, automake and libtool
for preparing Makefiles and configuration script, so the compilation
procedure resembles a standard, well-known GNU method, i.e. 

\verbatim 
% ./configure
% make
\endverbatim

The \c `configure' command can be invoked with additional switches and
options (run <tt>`./configure --help'</tt> to get a list of them). The
most important are:
- \c `--prefix=PREFIX' - set top installation directory to a certain \c
  PREFIX value. By default it is set to \c `/usr/local', so <tt>`make
  install'</tt> will install appropriate files into \c `/usr/local/include',
  \c `/usr/local/lib`, etc.
- \c `--enable-debug' - build an extra library named \c `librmol_debug.*'
  using special debugging flags for compiler and linker (disabled by default)
- \c `--enable-exceptions' - enable exceptions handling of run-time errors
  instead of aborting the program (disabled by default)
- \c `--disable-html-doc' - do not generate and install the HTML
  documentation (enabled by default)
- \c `--disable-shared' - do not build the shared version of the library
  (enabled by default for non Windows based platforms)
- \c `--disable-static' - do not build the static version of the library
  (enabled by default for Windows based platforms)
.
Plese note that each \c `--enable-\<OPTION\>' switch can be replaced
with its opposite switch \c `--disable-\<OPTION\>'.

By default, the \c `configure' script checks for a few external
libraries, which might be used by the RMOL library (cf. \ref
requirements).

If some external libraries are installed in a non-standard location in
your system, e.g. GSL in <tt>`/opt/gsl-1.11'</tt>, the \c `configure'
script will not detect them automatically. In such a case, you should
specify their path to the configure script, using \c
`--with-\<LIBNAME\>' switches, where \c \<LIBNAME\> is one of the
following: \c `gsl' or \c `boost':

\verbatim
% ./configure --with-gsl=/opt/gsl-1.11
\endverbatim

It is recommended to set CXXFLAGS environment variable with some
compiler- and platform-specific optimisation flags before invoking the 
\c `configure' command. For example, in the case of using the Intel Pentium
4 processor one might employ the following flags:

\verbatim
% CXXFLAGS="-O3 -pipe -march=pentium4" ./configure
\endverbatim

In the case of Sun's UltraSPARC 64-bit platform and GCC compiler, the flags
might be set as follows:

\verbatim
% export CXXFLAGS="-O3 -pipe -mcpu=v9 -m64"
% ./confiugre
\endverbatim

If CXXFLAGS is not set in the environment, it will be initialised with
the default flags, i.e. <tt>"-DASSERT_LEVEL=1 -O3 -pipe"</tt>.

When the configuration process is finished, a status message is displayed. 
For instance, after having invoked the following configuration
command on a recent Gentoo Linux system:

\verbatim
% ./configure
\endverbatim

one can observe something like this:

\verbatim
------------------------------------------------------------------------------
rmol-0.19.0 library configuration:
------------------------------------------------------------------------------

Directories:
  - prefix ............ : /usr/local
  - exec_prefix ....... : ${prefix}
  - includedir ........ : ${prefix}/include
  - libdir ............ : ${exec_prefix}/lib
  - docdir ............ : ${datarootdir}/doc/rmol-0.19.0
  - mandir ............ : ${datarootdir}/man
  - infodir ........... : ${datarootdir}/info

Switches:
  - debug ............. : no
  - exceptions ........ : yes
  - use-nls ........... : yes
  - info-doc .......... : yes
  - html-doc .......... : yes
  - shared ............ : yes
  - static ............ : no

Documentation tools:
  - texinfo ........... :
  - doxygen ........... : yes
  - latex ............. : yes
  - dvips ............. : yes
  - ghostscript ....... : yes

Testing tools:
  - diff .............. : yes
  - sed ............... : yes

Compiler/linker flags/libs/defs:
  - CXX ............... : g++
  - CXXFLAGS .......... : -DASSERT_LEVEL=1 -O3 -pipe
  - CXXFLAGS_DEBUG .... :
  - CPPFLAGS .......... :
  - LDFLAGS ........... :
  - LIBS .............. :

External libraries:
  - GSL ............... : /usr/bin/gsl-config
    o GSL_VERSION ..... : 1.11
    o GSL_CFLAGS ...... : -I/usr/include
    o GSL_LIBS ........ : -lgsl -lgslcblas -lm

  - Boost ............. :
    o BOOST_VERSION ... :
    o BOOST_CFLAGS .... : -pthread -I/usr/include
    o BOOST_LIBS ...... : -L/usr/lib
    o BOOST_DT_LIB .... : -lboost_date_time
    o BOOST_PO_LIB .... : -lboost_program_options
    o BOOST_FS_LIB .... : -lboost_filesystem

  - CPPUNIT ........... :
    o CPPUNIT_VERSION . : 1.12.1
    o CPPUNIT_CFLAGS .. :
    o CPPUNIT_LIBS .... : -lcppunit -ldl

------------------------------------------------------------------------------
Now type 'make && make install' to build and install rmol-0.19.0 library
------------------------------------------------------------------------------

\endverbatim

Now, it is time for compiling and linking the RMOL library. To do so,
please simply run the following command:

\verbatim
% make
\endverbatim

RMOL should compile without any errors or warnings. If this is not the
case, please submit a bug-report on the RMOL project page at SourceForge.
Please include information about your OS, compiler version, external
libraries and their versions, etc.

It is recommended that you check whether your library has been
compiled and linked properly and works as expected. To do so, you
should execute the testing process:

\verbatim
% make check
\endverbatim

As a result, you should obtain a similar report:

\verbatim
OptimiseTestSuite::testOptimise. : OK
OK (1 tests)
PASS: OptimiseTestSuite
SimulateTestSuite::testSimulate. : OK
OK (1 tests)
PASS: SimulateTestSuite
==================
All 2 tests passed
==================
\endverbatim

Check if all the executed tests PASSED. If not, please contact us by filling
a bug-report.

Finally, you should install the compiled and linked library, include files
and (optionally) HTML documentation by typing:

\verbatim
% make install
\endverbatim

Depending on the \c PREFIX settings during configuration, you might need
the root (administrator) access to perform this step.

Eventually, you might invoke the following command

\verbatim
% make clean
\endverbatim

to remove all files created during compilation process, or even

\verbatim
% make distclean
\endverbatim

to remove all files generated by the \c `configure' script.


\section macosx Instructions for RMOL Configuration on MacOS X

To compile and use RMOL under Mac OS X, you should install the latest
version of Apple's developer tools. The tools are delivered with MacOS X,
but you may need to unpack them. The configuration procedure is similar to
the one described above.


\section msvc RMOL Compilation and Installation using Microsoft Visual C++ .NET and Intel MKL

It is possible to compile and link the RMOL library using the 
<a href="http://msdn.microsoft.com/visualc/">Microsoft Visual C++ .NET</a>
compiler.

The next step is to compile and link the RMOL library. Assuming that you
have already downloaded and unpacked the RMOL package, you should find a
MSVC++ .NET project file <tt>rmol.vcproj</tt> in the <tt>win32</tt>
sub-directory. Open this project file in the MSVC++ .NET environment. There
are two default targets prepared for compilation and linking: <tt>Debug</tt>
and <tt>Release</tt>. The former can be used to compile a non-optimised
version of the library for debugging purposes, named
<tt>rmol_debug.lib</tt>, whereas the latter one should produce an optimised
library named <tt>rmol.lib</tt>. Both libraries are static ones and they
should be created in <tt>win32/libs</tt> sub-directory.

Finally, you can start using the RMOL library with your own programs and
link them with RMOL and MKL. Observe that several things need to be
correctly set up:
- The RMOL include directory must be defined. Settings for this can be found
in the menu <tt>"Tools -&gt; Options -&gt; Projects and Solutions -&gt; VC++
Directories -&gt; Include files"</tt>. Add a path to 
<tt>"<RMOL source directory>"</tt>, e.g. <tt>"C:\rmol-3.10.4"</tt>.
- The RMOL library directory must be defined. Settings for this can be found
in the menu <tt>"Tools -&gt; Options -&gt; Projects and Solutions -&gt; VC++
Directories -&gt; Library files"</tt>. Add a path to 
<tt>"<RMOL source directory>\win32\libs"</tt>, e.g.
<tt>"C:\rmol-3.10.4\win32\libs"</tt>.
- The GSL library directory must be defined. Add another library path with
<tt>"C:\Program Files\GSL\1.11\lib"</tt>.
- Linking with RMOL and GSL must be set up. Do this by marking your project
and go to the menu <tt>"Project -&gt; Properties -&gt; Configuration
Properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies"</tt>.
There you need to add <tt>rmol_debug.lib</tt> or <tt>rmol.lib</tt> depending
on whether Debug or Release mode are being used. Furthermore, you need to
add <tt>gsl_dll.lib</tt>.
- The runtime library for linking needs to be set to <tt>Multi-threaded
Debug</tt> or <tt>Multi-threaded</tt>. This option can be set in the menu
<tt>"Project -&gt; Properties -&gt; Configuration Properties -&gt; C/C++
-&gt; Code Generation -&gt; Runtime Library"</tt>.
- Two additional definitions: <tt>_CRT_SECURE_NO_DEPRECATE</tt> and
<tt>_CRT_NONSTDC_NO_DEPRECATE</tt>, which disable warnings on C Standard
Library and POSIX-compilant function names, might be also added in
<tt>"Project -&gt; Properties -&gt; Configuration Properties -&gt; C/C++
-&gt; Preprocessor -&gt; Preprocessor Definitions"</tt>.

Please note that Project settings for your program must be made for both the
Debug and Release modes.

*/
