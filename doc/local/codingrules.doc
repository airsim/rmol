/*! 
\page coding_rules Coding Rules

In the following sections we describe the naming conventions which are
used for files, classes, structures, local variables, and global variables.


\section cr_variables Default Naming Rules for Variables

Variables names follow Java naming conventions.
Examples:
- \c lNumberOfPassengers
- \c lSeatAvailability


\section cr_functions Default Naming Rules for Functions

Function names follow Java naming conventions. Example:
- <tt>int myFunctionName (const int& a, int b)</tt>


\section cr_classes Default Naming Rules for Classes and Structures

Each new word in a class or structure name should always start with a
capital letter and the words should be separated with an
under-score. Abbreviations are written with capital letters. Examples:
- \c MyClassName
- \c MyStructName


\section cr_files Default Naming Rules for Files

Files are named after the C++ class names.

Source files are named using <tt>.cpp</tt> suffix, whereas header
files end with <tt>.hpp</tt> extension. Examples:
- <tt>FlightDate.hpp</tt>
- <tt>SegmentDate.cpp</tt>



\section cr_classes_functionality Default Functionality of Classes

All classes that are configured by input parameters should include:
- default empty constructor
- one or more additional constructor(s) that takes input parameters
  and initializes the class instance
- setup function, preferably named \c `setup' or \c `set_parameters'

Explicit destructor functions are not required, unless they are
needed. It shall not be possible to use any of the other member
functions unless the class has been properly initiated with the input
parameters.

*/
