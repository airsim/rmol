/*!
\page howto_release Make a new release

\htmlonly
<!-- 
The following tags are permitted: a, b, blockquote, br, code, dd, div,
dl, dt, em, hr, i, li, ol, p, pre, strong, tt, ul, u. All other tags will be
stripped. All tags aside from the following must be closed: br, hr, li, p.
Failure to close tags may result in HTML output which is not rendered
properly. Any style attributes or on* attributes (such as mouseover) will be
stripped. JavaScript will result in the total stripping of HTML tags from
your input. Please limit your input to properly formed HTML snippets
conforming to the above rules. 
-->
\endhtmlonly

\section description Introduction

This document describes briefly the recommended procedure of releasing
a new version of RMOL using a Linux development machine and the
SourceForge project site.

The following steps are required to make a release of the distribution package.


\section initialisation Initialisation

Check out locally the full
<a href="https://rmol.svn.sourceforge.net/svnroot/rmol">Subversion project</a>:
\verbatim 
cd ~
mkdir -p dev
cd ~/dev
svn co https://rmol.svn.sourceforge.net/svnroot/rmol rmolsvn
\endverbatim 


\section branch_preparation Branch preparation

Prepare the branch for its creation on the Subversion repository:
\verbatim 
cd ~/dev
cd rmolsvn/branches/rmol
mkdir 0.23.0
svn add 0.23.0
svn ci -m "[Branch 0.23.0] Prepared the branch 0.23.0 to be copied from head of the trunk."
\endverbatim 

\section check_release_revision Check Subversion revision for the release

Check to which Subversion revision the release corresponds to. For instance
the <a href="http://sourceforge.net/apps/trac/rmol/changeset/218/">RMOL
	release 0.23.0 corresponds to Subversion revision r218</a>.
The trunk <tt>configure.ac</tt> file specifies a fake release number, namely
99.99.99,
for current (head) development. When a release is made, two Subversion 
revisions are committed with, as the sole change, the release number within
the <tt>configure.ac</tt> file:
- one revision is committed with the to-be-released version number (e.g.,
  0.23.0) and commit message prefixed with "[Release x.y.z]",
- and another one with the release number back to 99.99.99 and message stating
  "[Release] Back to working version (99.99.99)."
.
That way, it is then easy to spot the starting point of any release within
the Subversion repository, with something like:
\verbatim 
cd ~/dev
cd rmolsvn/trunk/rmol
svn log configure.ac | less
\endverbatim 


\section create_release_branch Create the release branch

Create a release branch by copying the
<a href="https://rmol.svn.sourceforge.net/svnroot/rmol/trunk/rmol">source
   tree</a> to be released, from the found revision (e.g., 
<a href="http://sourceforge.net/apps/trac/rmol/changeset/233">r233</a>)
into the dedicated 
<a href="https://rmol.svn.sourceforge.net/svnroot/rmol/branches/rmol/0.23.0">'branches' sub-directory of the Subversion repository</a>, e.g.:
\verbatim 
svn copy -r233 \
 https://rmol.svn.sourceforge.net/svnroot/rmol/trunk/rmol \
 https://rmol.svn.sourceforge.net/svnroot/rmol/branches/rmol/0.23.0/main \
 -m "[Release] Created the main 0.23.0 release branch, from revision r233."
\endverbatim 

Check the results:<br>
\c firefox -new-tab \"<a href="http://sourceforge.net/apps/trac/rmol/browser/branches/rmol/0.23.0/main">http://sourceforge.net/apps/trac/rmol/browser/branches/rmol/0.23.0/main</a>\"


\section checkout_new_release Check-out the new release

Check-out the release RMOL sources from the branch, so that patches
may be made (for instance, on the RPM specification file):
\verbatim 
cd ~/dev
cd rmolsvn/branches/rmol/0.23.0
svn up
cd main
\endverbatim 


\section alter_released_files Alter released files

<b>Only if needed</b>, alter a few files on the branch.

<b>Note that the release branch is not the place where to develop for a 
release.</b>
The <b>release</b> branch is aimed at keeping track of a release and of all
the patches having made their way into that branch, so that the software
can always be generated according to that release.

Developments for a particular release should be made on the trunk (e.g., by
adding features not activated by default, but activated for the release
developers only) or, if really needed, on a dedicated <b>development</b> branch.


\section create_packages Create distribution packages

Create the distribution packages using the following command:<br>
\verbatim 
cd ~/dev
cd rmolsvn/branches/rmol/0.23.0/main
./autogen.sh && make distcheck
\endverbatim 


This will configure, compile and check the package. The output packages
will be named, for instance, <tt>rmol-0.23.0.tar.gz</tt> and
<tt>rmol-0.23.0.tar.bz2</tt>.


\section generate_rpm_packages Generation the RPM packages

Optionally, generate the RPM package (for instance, for 
<a href="http://fedoraproject.org">Fedora</a>/<a href="http://www.redhat.com">RedHat</a>):
\verbatim 
cd ~/dev
cd rmolsvn/branches/rmol/0.23.0/main
./autogen.sh && make dist
\endverbatim 

To perform this step, autoconf, automake and libtool tools have to be
available in the system.
\verbatim 
cp rmol.spec ~/dev/packages/SPECS \
  && cp rmol-0.23.0.tar.bz2 ~/dev/packages/SOURCES
cd ~/dev/packages/SPECS
rpmbuild -ba rmol.spec
rpmlint -i ../SPECS/rmol.spec ../SRPMS/rmol-0.23.0-1.fc13.src.rpm \
  ../RPMS/i686/rmol-*
\endverbatim 


\section update_changelog Update distributed change log

Update the \c NEWS and \c ChangeLog files with appropriate
information, including what has changed since the previous release. Then
commit the changes into the 
<a href="https://sourceforge.net/apps/trac/rmol/browser">RMOL's 
  Subversion (SVN) repository</a>.


\section create_doc_packages Create the documentation packages

Create the documentation packages using the following command:
<tt>make dist-html</tt> and <tt>make dist-tex</tt>

The output documentation packages will be named, for instance:
- <tt>rmol-doc-0.23.0.tar.gz</tt> and <tt>rmol-doc-0.23.0.tar.bz2</tt>
  for the HTML documentation.
- <tt>rmol-pdf-0.23.0.tar.gz</tt> and <tt>rmol-pdf-0.23.0.tar.bz2</tt>
  for the PDF documentation.


\section upload_files Upload the files to SourceForge

Upload the distribution and documentation packages to the SourceForge server.
Check
<a href="https://sourceforge.net/apps/trac/sourceforge/wiki/Release%20files%20for%20download#SCP">SourceForge help page on uploading software</a>.


\section upload_doc Upload the documentation to SourceForge

In order to update the Web site files, either:
- <a href="https://sourceforge.net/apps/trac/sourceforge/wiki/Shell%20service#Accessingyourfileswithothertools">synchronise them with rsync and SSH</a>:
\verbatim 
cd ~/dev
cd rmolsvn/branches/rmol/0.23.0/main
rsync -aiv doc/html/ joe,rmol@web.sourceforge.net:htdocs/
\endverbatim 
where \c -aiv options mean:
  - \c -a: archive/mirror mode; equals \c -rlptgoD
    (no \c -H, \c -A, \c -X)
  - \c -v: increase verbosity
  - \c -i: output a change-summary for all updates
  - Note the trailing slashes (/) at the end of both the source and target 
    directories. It means that the content of the source directory 
    (<tt>doc/html</tt>), rather than the directory itself, has to be copied
    into the content of the target directory.
- or use the
 <a href="https://sourceforge.net/apps/trac/sourceforge/wiki/Shell%20service">SourceForge Shell service</a>.


\section post_news Make a new post

- submit a new entry in the
  <a href="https://sourceforge.net/news/submit.php?group_id=177703">SourceForge
  project-related news feed</a>
- make a new post on the
  <a href="https://sourceforge.net/apps/wordpress/rmol/wp-admin/">SourceForge
  hosted WordPress blog</a>
- and update, if necessary,
  <a href="https://sourceforge.net/apps/trac/rmol/report">Trac tickets</a>.


\section send_announce Send an email on the announcement mailing-list

Finally, you should send an announcement to
  <a href="mailto:rmol-announce@lists.sourceforge.net">rmol-announce@lists.sourceforge.net</a>
  (see <a href="https://lists.sourceforge.net/lists/listinfo/rmol-announce">https://lists.sourceforge.net/lists/listinfo/rmol-announce</a>
  for the archives)

*/
