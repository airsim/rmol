/*!
\page installation Installation

\section toc Table of Contents
- \ref rpm_linux
- \ref requirements
- \ref basic_instructions
- \ref compilers
- \ref compiling_for_multi_arch
- \ref installation_names
- \ref optional_features
- \ref particular_systems
- \ref specifying_system_type
- \ref sharing_defaults
- \ref defining_variables
<<<<<<< HEAD
- \ref configure_invocation
=======
- \ref cmake_invocation
>>>>>>> 0.24


\section rpm_linux Fedora/RedHat Linux distributions

Note that on
<a href="http://fedoraproject.org">Fedora</a>/<a href="http://www.redhat.com">RedHat</a>
Linux distributions, RPM packages are available and can be installed
with your usual package manager. For instance:<br>
<code> yum -y install rmol-devel rmol-doc </code>

RPM packages can also be available on the
<a href="http://sourceforge.net/project/showfiles.php?group_id=177703">SourceForge download site</a>.


\section requirements RMOL Requirements

RMOL should compile without errors or warnings on most GNU/Linux systems,
on UNIX systems like Solaris SunOS, and on POSIX based environments for
Microsoft Windows like Cygwin or MinGW with MSYS. It can be also built on
<<<<<<< HEAD
Microsoft Windows NT/2000/XP using Microsoft's Visual C++ .NET, but our 
support for this compiler is limited. For GNU/Linux, SunOS, Cygwin and MinGW
we assume that you have at least the following GNU software installed on
your computer:
=======
Microsoft Windows NT/2000/XP/Vista/7 using Microsoft's Visual C++ .NET, but 
our support for this compiler is limited. For GNU/Linux, SunOS, Cygwin and 
MinGW we assume that you have at least the following GNU software installed 
on your computer:
>>>>>>> 0.24
- GNU Autotools:
  - <a href="http://www.gnu.org/software/autoconf/">autoconf</a>, 
  - <a href="http://www.gnu.org/software/automake/">automake</a>,
  - <a href="http://www.gnu.org/software/libtool/">libtool</a>, 
  - <a href="http://www.gnu.org/software/make/">make</a>, version 3.72.1
  or later (check version with \c `make --version')
- <a href="http://gcc.gnu.org/">GCC</a> - GNU C++ Compiler (g++), version 4.3.x
  or later (check version with \c `gcc --version')
- <a href="http://www.boost.org/">Boost</a> - C++ STL extensions, version 1.35
  or later (check version with
  \c `grep "define BOOST_LIB_VERSION" /usr/include/boost/version.hpp')
- <a href="http://dev.mysql.com/">MySQL</a> - Database client libraries, 
  version 5.0 or later (check version with \c `mysql --version')
- <a href="http://soci.sourceforge.net/">SOCI</a> - C++ database client 
  library wrapper, version 3.0.0 or later (check version with 
  \c `soci-config --version')
.
Optionally, you might need a few additional programs:
<a href="http://www.doxygen.org/">Doxygen</a>, 
<a href="http://www.latex-project.org/">LaTeX</a>,
<a href="http://www.radicaleye.com/dvips.html">Dvips</a> and 
<a href="http://www.cs.wisc.edu/~ghost/">Ghostscript</a>, to generate the
HTML and PDF documentation.

We strongly recommend that you use recent stable releases of the GCC, if
possible. We do not actively work on supporting older versions of the GCC,
and they may therefore (without prior notice) become unsupported in future
releases of RMOL.


\section basic_instructions Basic Installation

<<<<<<< HEAD
   Briefly, the shell commands <tt>`./configure; make; make install'</tt> 
should configure, build, and install this package.  The following
=======
   Briefly, the shell commands <tt>`./cmake .. && make install'</tt> 
should configure, build and install this package.  The following
>>>>>>> 0.24
more-detailed instructions are generic; see the \c `README' file for
instructions specific to this package.  Some packages provide this
\c `INSTALL' file but do not implement all of the features documented
below.  The lack of an optional feature in a given package is not
necessarily a bug.  More recommendations for GNU packages can be found
in the info page corresponding to "Makefile Conventions: 
(standards)Makefile Conventions".

<<<<<<< HEAD
   The \c `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a \c `Makefile' in each directory of the package.
It may also create one or more \c `.h' files containing system-dependent
definitions.  Finally, it creates a shell script \c `config.status' that
you can run in the future to recreate the current configuration, and a
file \c `config.log' containing compiler output (useful mainly for
debugging \c `configure').
=======
   The \c `cmake' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a \c `Makefile' in each directory of the package.
It may also create one or more \c `.h' files containing system-dependent
definitions.  Finally, it creates a \c `CMakeCache.txt' cache file that
you can refer to in the future to recreate the current configuration, and
files \c `CMakeFiles' containing compiler output (useful mainly for
debugging \c `cmake').
>>>>>>> 0.24

   It can also use an optional file (typically called \c `config.cache'
and enabled with \c `--cache-file=config.cache' or simply \c `-C') that 
saves the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the \c `README' so they can
be considered for the next release.  If you are using the cache, and at
some point \c `config.cache' contains results you don't want to keep, you
may remove or edit it.

<<<<<<< HEAD
   The file <tt>`configure.ac'</tt> (or <tt>`configure.in'</tt>) is
used to create \c `configure' by a program called \c `autoconf'.  You
need <tt>`configure.ac'</tt> if you want to change it or regenerate \c
`configure' using a newer version of \c `autoconf'.

The simplest way to compile this package is:
-# \c `cd' to the directory containing the package's source code and
   type <tt>`./configure'</tt> to configure the package for your
   system.  Running \c `configure' might take a while.  While running,
=======
   The file <tt>`CMakeLists.txt'</tt> is used to create the \c `Makefile' 
files.

The simplest way to compile this package is:
-# \c `cd' to the directory containing the package's source code and
   type <tt>`./cmake ..'</tt> to configure the package for your
   system.  Running \c `cmake' is generally fast.  While running,
>>>>>>> 0.24
   it prints some messages telling which features it is checking for.
-# Type \c `make' to compile the package.
-# Optionally, type <tt>`make check'<tt> to run any self-tests that
   come with the package, generally using the just-built uninstalled
   binaries.
-# Type <tt>`make install'</tt> to install the programs and any data
   files and documentation.  When installing into a prefix owned by
   root, it is recommended that the package be configured and built as
   a regular user, and only the `make install' phase executed with
   root privileges.
<<<<<<< HEAD
-# Optionally, type <tt>`make installcheck'</tt> to repeat any
   self-tests, but this time using the binaries in their final
   installed location.  This target does not install anything.
   Running this target as a regular user, particularly if the prior
   <tt>`make install'</tt> required root privileges, verifies that the
   installation completed correctly.
=======
>>>>>>> 0.24
-# You can remove the program binaries and object files from the
   source code directory by typing <tt>`make clean'</tt>.  To also
   remove the files that \c `configure' created (so you can compile
   the package for a different kind of computer), type <tt>`make
   distclean'</tt>.  There is also a <tt>`make maintainer-clean'</tt>
   target, but that is intended mainly for the package's developers.
   If you use it, you may have to get all sorts of other programs in
   order to regenerate files that came with the distribution.
-# Often, you can also type <tt>`make uninstall'</tt> to remove the installed
   files again.  In practice, not all packages have tested that
   uninstallation works correctly, even though it is required by the
   GNU Coding Standards.
<<<<<<< HEAD
-# Some packages, particularly those that use Automake, provide
   <tt>`make distcheck'</tt>, which can by used by developers to test
   that all other targets like <tt>`make install'</tt> and <tt>`make
   uninstall'</tt> work correctly.  This target is generally not run
   by end users.
=======
>>>>>>> 0.24


\section compilers Compilers and Options

   Some systems require unusual options for compilation or linking
<<<<<<< HEAD
that the \c `configure' script does not know about.  Run
<tt>`./configure --help'</tt> for details on some of the pertinent
environment variables.

   You can give \c `configure' initial values for configuration parameters
=======
that the \c `cmake' script does not know about.  Run
<tt>`./cmake --help'</tt> for details on some of the pertinent
environment variables.

   You can give \c `cmake' initial values for configuration parameters
>>>>>>> 0.24
by setting variables in the command line or in the environment.  Here
is an example:

\verbatim
<<<<<<< HEAD
./configure CC=c99 CFLAGS=-g LIBS=-lposix
=======
./cmake CC=c99 CFLAGS=-g LIBS=-lposix
>>>>>>> 0.24
\endverbatim

   \see \ref defining_variables for more details.


\section compiling_for_multi_arch Compiling For Multiple Architectures

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you can use GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.  This
is known as a \c "VPATH" build.

   With a non-GNU \c `make', it is safer to compile the package for one
architecture at a time in the source code directory.  After you have
installed the package for one architecture, use `make distclean' before
reconfiguring for another architecture.

   On MacOS X 10.5 and later systems, you can create libraries and
executables that work on multiple system types--known as "fat" or
"universal" binaries--by specifying multiple `-arch' options to the
compiler but only a single `-arch' option to the preprocessor.  Like
this:

\verbatim
./configure CC="gcc -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
            CXX="g++ -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
            CPP="gcc -E" CXXCPP="g++ -E"
\endverbatim

   This is not guaranteed to produce working output in all cases, you
may have to build one architecture at a time and combine the results
using the `lipo' tool if you have problems.


\section installation_names Installation Names

   By default, <tt>`make install'</tt> installs the package's commands
under <tt>`/usr/local/bin'</tt>, include files under
<tt>`/usr/local/include'</tt>, etc.  You can specify an installation
prefix other than <tt>`/usr/local'</tt> by giving \c `configure' the
option <tt>`--prefix=PREFIX'</tt>, where \c PREFIX must be an absolute
file name.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If
you pass the option <tt>`--exec-prefix=PREFIX'</tt> to `configure',
the package uses \c PREFIX as the prefix for installing programs and
libraries.  Documentation and other data files still use the regular
prefix.

   In addition, if you use an unusual directory layout you can give
options like <tt>`--bindir=DIR'</tt> to specify different values for
particular kinds of files.  Run `configure --help' for a list of the
directories you can set and what kinds of files go in them.  In
general, the default for these options is expressed in terms of
<tt>`${prefix}'</tt>, so that specifying just <tt>`--prefix'</tt> will
affect all of the other directory specifications that were not
explicitly provided.

   The most portable way to affect installation locations is to pass
the correct locations to \c `configure'; however, many packages
provide one or both of the following shortcuts of passing variable
assignments to the <tt>`make install'</tt> command line to change
installation locations without having to reconfigure or recompile.

   The first method involves providing an override variable for each
affected directory.  For example, <tt>`make install
prefix=/alternate/directory'</tt> will choose an alternate location
for all directory configuration variables that were expressed in terms
of <tt>`${prefix}'</tt>.  Any directories that were specified during
\c `configure', but not in terms of <tt>`${prefix}'</tt>, must each be
overridden at install time for the entire installation to be
relocated.  The approach of makefile variable overrides for each
directory variable is required by the GNU Coding Standards, and
ideally causes no recompilation.  However, some platforms have known
limitations with the semantics of shared libraries that end up
requiring recompilation when using this method, particularly
noticeable in packages that use GNU Libtool.

   The second method involves providing the \c `DESTDIR' variable.
For example, <tt>`make install DESTDIR=/alternate/directory'</tt> will
prepend <tt>`/alternate/directory'</tt> before all installation names.
The approach of \c `DESTDIR' overrides is not required by the GNU
Coding Standards, and does not work on platforms that have drive
letters.  On the other hand, it does better at avoiding recompilation
issues, and works well even when some directory options were not
specified in terms of <tt>`${prefix}'</tt> at \c `configure' time.


\section optional_features Optional Features

   If the package supports it, you can cause programs to be installed
<<<<<<< HEAD
with an extra prefix or suffix on their names by giving \c `configure'
=======
with an extra prefix or suffix on their names by giving \c `cmake'
>>>>>>> 0.24
the option <tt>`--program-prefix=PREFIX'</tt> or
<tt>`--program-suffix=SUFFIX'</tt>.

   Some packages pay attention to <tt>`--enable-FEATURE'</tt> options
to \c `configure', where \c FEATURE indicates an optional part of the
package.  They may also pay attention to <tt>`--with-PACKAGE'</tt>
options, where \c PACKAGE is something like <tt>`gnu-as'</tt> or \c
`x' (for the X Window System).  The \c `README' should mention any
<tt>`--enable-'</tt> and <tt>`--with-'</tt> options that the package
recognizes.

   For packages that use the X Window System, \c `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the \c `configure' options <tt>`--x-includes=DIR'</tt> and
<tt>`--x-libraries=DIR'</tt> to specify their locations.

   Some packages offer the ability to configure how verbose the
execution of `make' will be.  For these packages, running <tt>`./configure
--enable-silent-rules'</tt> sets the default to minimal output, which can be
overridden with <tt>`make V=1'</tt>; while running <tt>`./configure
--disable-silent-rules'</tt> sets the default to verbose, which can be
overridden with <tt>`make V=0'</tt>.


\section particular_systems Particular systems

   On HP-UX, the default C compiler is not ANSI C compatible.  If GNU
CC is not installed, it is recommended to use the following options in
order to use an ANSI C compiler:

\verbatim
./configure CC="cc -Ae -D_XOPEN_SOURCE=500"
\endverbatim

and if that doesn't work, install pre-built binaries of GCC for HP-UX.

   On OSF/1 a.k.a. Tru64, some versions of the default C compiler
cannot parse its <tt>`<wchar.h>'</tt> header file.  The option
<tt>`-nodtk'</tt> can be used as a workaround.  If GNU CC is not
installed, it is therefore recommended to try

\verbatim
./configure CC="cc"
\endverbatim

and if that doesn't work, try

\verbatim
./configure CC="cc -nodtk"
\endverbatim

   On Solaris, don't put \c `/usr/ucb' early in your \c `PATH'.  This
directory contains several dysfunctional programs; working variants of
these programs are available in \c `/usr/bin'.  So, if you need \c `/usr/ucb'
in your \c `PATH', put it _after_ \c `/usr/bin'.

   On Haiku, software installed for all users goes in \c `/boot/common',
not \c `/usr/local'.  It is recommended to use the following options:

\verbatim
<<<<<<< HEAD
./configure --prefix=/boot/common
=======
./cmake -DCMAKE_INSTALL_PREFIX=/boot/common
>>>>>>> 0.24
\endverbatim


\section specifying_system_type Specifying the System Type

   There may be some features \c `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
\c `--build=TYPE' option.  \c TYPE can either be a short name for the 
system type, such as \c `sun4', or a canonical name which has the form 
\c CPU-COMPANY-SYSTEM

where \c SYSTEM can have one of these forms:
- \c OS
- \c KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
\c `config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option \c `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with \c `--host=TYPE'.


\section sharing_defaults Sharing Defaults

   If you want to set default values for \c `configure' scripts to share,
you can create a site shell script called \c `config.site' that gives
default values for variables like \c `CC', \c `cache_file', and \c `prefix'.
\c `configure' looks for \c `PREFIX/share/config.site' if it exists, then
\c `PREFIX/etc/config.site' if it exists.  Or, you can set the
\c `CONFIG_SITE' environment variable to the location of the site script.
A warning: not all \c `configure' scripts look for a site script.


\section defining_variables Defining Variables

   Variables not defined in a site shell script can be set in the
environment passed to \c `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the \c `configure' command line, using \c `VAR=value'.
For example:
\verbatim
./configure CC=/usr/local2/bin/gcc
\endverbatim

causes the specified \c `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).

Unfortunately, this technique does not work for \c `CONFIG_SHELL' due to
an Autoconf bug.  Until the bug is fixed you can use this workaround:
\verbatim
CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash
\endverbatim


<<<<<<< HEAD
\section configure_invocation `configure' Invocation

   \c `configure' recognizes the following options to control how it
=======
\section cmake_invocation `cmake' Invocation

   \c `cmake' recognizes the following options to control how it
>>>>>>> 0.24
operates.
- <tt>`--help'</tt>, \c `-h' print a summary of all of the options to
  `configure', and exit.
- <tt>`--help=short'</tt>, <tt>`--help=recursive'</tt> print a summary
  of the options unique to this package's \c `configure', and exit.
  The \c `short' variant lists options used only in the top level, while 
  the \c `recursive' variant lists options also present in any nested packages.
- <tt>`--version'</tt>, `-V' print the version of Autoconf used to generate
  the `configure' script, and exit.
- <tt>`--cache-file=FILE'</tt> enable the cache: use and save the
  results of the tests in \c FILE, traditionally
  <tt>`config.cache'</tt>.
  \c FILE defaults to <tt>`/dev/null'</tt> to disable caching.
- <tt>`--config-cache'</tt>, \c `-C' alias for
  <tt>`--cache-file=config.cache'</tt>.
- <tt>`--quiet'</tt>, <tt>`--silent'</tt>, \c `-q' do not print
  messages saying which checks are being made.  To suppress all normal
  output, redirect it to <tt>`/dev/null'</tt> (any error messages will
  still be shown).
- <tt>`--srcdir=DIR'</tt> look for the package's source code in
  directory \c DIR.  Usually \c `configure' can determine that
  directory automatically.
- <tt>`--prefix=DIR'</tt> use \c DIR as the installation prefix.
  \see \ref installation_names for more details, including other options 
  available for fine-tuning the installation locations.
- <tt>`--no-create'</tt>, \c `-n' run the configure checks, but stop
  before creating any output files.

<<<<<<< HEAD
\c `configure' also accepts some other, not widely useful, options.  Run
<tt>`configure --help'</tt> for more details.

The \c `configure' script produces an ouput like this:

\verbatim
------------------------------------------------------------------------------
rmol-99.99.99 library configuration:
------------------------------------------------------------------------------

Directories:
  - prefix ............ : /home/dan/dev/deliveries/rmol-99.99.99
  - exec_prefix ....... : ${prefix}
  - includedir ........ : ${prefix}/include
  - libdir ............ : ${exec_prefix}/lib
  - docdir ............ : ${datarootdir}/doc/rmol-99.99.99
  - mandir ............ : ${datarootdir}/man
  - infodir ........... : ${datarootdir}/info

Switches:
  - exceptions ........ : yes
  - use-nls ........... : 
  - info-doc .......... : yes
  - html-doc .......... : yes
  - shared ............ : yes
  - static ............ : no

Documentation tools:
  - texinfo ........... : 
  - doxygen ........... : yes
  - latex ............. : yes
  - dvips ............. : yes
  - ghostscript ....... : yes

Testing tools:
  - diff .............. : yes
  - sed ............... : yes

Compiler/linker flags/libs/defs:
  - CXX ............... : g++
  - CFLAGS ............ : -g -Wall
  - CXXFLAGS .......... : -g -Wall
  - CPPFLAGS .......... : 
  - FFLAGS ............ : 
  - LDFLAGS ........... : 
  - LIBS .............. : 

External libraries:
  - GSL ............... : /usr/bin/gsl-config
    o GSL_VERSION ..... : 1.13
    o GSL_CFLAGS ...... : -I/usr/include
    o GSL_LIBS ........ : -lgsl -lgslcblas -lm

  - Python ............. :
    o PYTHON_version ... : 2.6.4
    o PYTHON_CFLAGS .... : -I/usr/include/python2.6
    o PYTHON_LIBS ...... : -L/usr/lib64 -lpython2.6
    o PYTHON_ADD_LIBS .. : -lpthread -ldl  -lutil -lm

  - Boost ............. :
    o BOOST_VERSION ... : 1_41
    o BOOST_CFLAGS .... : -pthread -I/usr/include
    o BOOST_LIBS ...... : -L/usr/lib64
    o BOOST_DT_LIB .... : -lboost_date_time
    o BOOST_PO_LIB .... : -lboost_program_options
    o BOOST_FS_LIB .... : -lboost_filesystem
    o BOOST_THRD_LIB .. : -lboost_thread-mt
    o BOOST_PY_LIB .... : -lboost_python -L/usr/lib64 -lpython2.6 -lpthread -ldl  -lutil -lm
    o BOOST_ASIO_LIB .. : -lboost_system -lboost_thread-mt -lboost_date_time -lboost_regex -lboost_serialization
    o BOOST_MPI_LIB ... : 
    o BOOST_MPIPY_LIB . : 

  - MySQL ............. :
    o MYSQL_version ... : 5.1.48
    o MYSQL_CFLAGS .... : -I/usr/include/mysql
    o MYSQL_LIBS ...... : -L/usr/lib64/mysql -lmysqlclient

  - SOCI .............. :
    o SOCI_version .... : 3.0.0
    o SOCI_CFLAGS ..... : -DSOCI_HEADERS_BURIED -DSOCI_MYSQL_HEADERS_BURIED -I/usr/include/mysql 
    o SOCI_LIBS ....... : -L/usr/lib64/mysql -lmysqlclient  -lsoci_core -lsoci_mysql -ldl

  - ExtraCC ........... :
    o EXTRACC_VERSION . : 
    o EXTRACC_CFLAGS .. : 
    o EXTRACC_LIBS .... : 

  - CPPUNIT ........... :
    o CPPUNIT_VERSION . : 1.12.1
    o CPPUNIT_CFLAGS .. : 
    o CPPUNIT_LIBS .... : -lcppunit -ldl

------------------------------------------------------------------------------
Now type 'make && make install' to build and install rmol-99.99.99 library
------------------------------------------------------------------------------
=======
\c `cmake' also accepts some other, not widely useful, options.  Run
<tt>`cmake --help'</tt> for more details.

The \c `cmake' script produces an ouput like this:

\verbatim
cmake -DCMAKE_INSTALL_PREFIX=/home/user/dev/deliveries/rmol-99.99.99 -DLIB_SUFFIX=64 -DCMAKE_BUILD_TYPE:STRING=Debug -DWITH_STDAIR_PREFIX=/home/user/dev/deliveries/stdair-stable -DINSTALL_DOC:BOOL=ON ..
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Check for working C compiler: /usr/lib64/ccache/gcc
-- Check for working C compiler: /usr/lib64/ccache/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/lib64/ccache/c++
-- Check for working CXX compiler: /usr/lib64/ccache/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Requires Git without specifying any version
-- Current Git revision name: 56c6c98cf2cfb4008a0acd35d08075cf5f79e693 trunk
-- Requires Boost-1.41
-- Boost version: 1.46.0
-- Found the following Boost libraries:
--   program_options
--   date_time
--   iostreams
--   serialization
--   filesystem
--   unit_test_framework
--   python
-- Found Boost version: 1.46.0
-- Found BoostWrapper: /usr/include (Required is at least version "1.41")
-- Requires MySQL without specifying any version
-- Using mysql-config: /usr/bin/mysql_config
-- Found MySQL: /usr/lib64/mysql/libmysqlclient.so 
-- Found MySQL version: 5.5.14
-- Requires SOCI-3.0
-- Using soci-config: /usr/bin/soci-config
-- SOCI headers are buried
-- Found SOCI: /usr/lib64/libsoci_core.so (Required is at least version "3.0")
-- Found SOCIMySQL: /usr/lib64/libsoci_mysql.so (Required is at least version "3.0")
-- Found SOCI with MySQL back-end support version: 3.0.0
-- Requires StdAir-0.35
-- Found StdAir version: 0.37.1
-- Requires Doxygen without specifying any version
-- Found Doxygen: /usr/bin/doxygen 
-- Found DoxygenWrapper: /usr/bin/doxygen 
-- Found Doxygen version: 1.7.4
-- Had to set the linker language for 'airraclib' to CXX
-- Had to set the linker language for 'rmollib' to CXX
-- Test 'UnconstrainerTest' to be built with 'UnconstrainerTestSuite.cpp'
-- Test 'ForecasterTest' to be built with 'ForecasterTestSuite.cpp'
-- Test 'OptimiseTest' to be built with 'OptimiseTestSuite.cpp'
-- Test 'BOMsForForecasterTest' to be built with 'bomsforforecaster.cpp'
-- 
-- =============================================================
-- ----------------------------------
-- ---     Project Information    ---
-- ----------------------------------
-- PROJECT_NAME ................... : rmol
-- PACKAGE_PRETTY_NAME ............ : RMOL
-- PACKAGE ........................ : rmol
-- PACKAGE_NAME ................... : RMOL
-- PACKAGE_BRIEF .................. : C++ library of Revenue Management and Optimisation classes and functions
-- PACKAGE_VERSION ................ : 99.99.99
-- GENERIC_LIB_VERSION ............ : 99.99.99
-- GENERIC_LIB_SOVERSION .......... : 99.99
-- 
-- ----------------------------------
-- ---     Build Configuration    ---
-- ----------------------------------
-- Modules to build ............... : airrac;rmol
-- Libraries to build/install ..... : airraclib;rmollib
-- Binaries to build/install ...... : airrac;rmol
-- Modules to test ................ : rmol
-- Binaries to test ............... : UnconstrainerTesttst;UnconstrainerTesttst;ForecasterTesttst;UnconstrainerTesttst;ForecasterTesttst;OptimiseTesttst;UnconstrainerTesttst;ForecasterTesttst;OptimiseTesttst;BOMsForForecasterTesttst
-- 
-- * Module ....................... : airrac
--   + Layers to build ............ : .;basic;bom;factory;command;service
--   + Dependencies on other layers : 
--   + Libraries to build/install . : airraclib
--   + Executables to build/install : airrac
--   + Tests to perform ........... : 
-- * Module ....................... : rmol
--   + Layers to build ............ : .;basic;bom;factory;command;service
--   + Dependencies on other layers : airraclib
--   + Libraries to build/install . : rmollib
--   + Executables to build/install : rmol
--   + Tests to perform ........... : UnconstrainerTesttst;UnconstrainerTesttst;ForecasterTesttst;UnconstrainerTesttst;ForecasterTesttst;OptimiseTesttst;UnconstrainerTesttst;ForecasterTesttst;OptimiseTesttst;BOMsForForecasterTesttst
-- 
-- BUILD_SHARED_LIBS .............. : ON
-- CMAKE_BUILD_TYPE ............... : Debug
--  * CMAKE_C_FLAGS ............... : 
--  * CMAKE_CXX_FLAGS ............. : -Wall -Werror
--  * BUILD_FLAGS ................. : 
--  * COMPILE_FLAGS ............... : 
-- CMAKE_MODULE_PATH .............. : /home/user/dev/sim/rmol/rmolgithub/config/
-- CMAKE_INSTALL_PREFIX ........... : /home/user/dev/deliveries/rmol-99.99.99
-- 
-- * Doxygen:
--   - DOXYGEN_VERSION .............. : 1.7.4
--   - DOXYGEN_EXECUTABLE ........... : /usr/bin/doxygen
--   - DOXYGEN_DOT_EXECUTABLE ....... : /usr/bin/dot
--   - DOXYGEN_DOT_PATH ............. : /usr/bin
-- 
-- ----------------------------------
-- --- Installation Configuration ---
-- ----------------------------------
-- INSTALL_LIB_DIR ................ : /home/user/dev/deliveries/rmol-99.99.99/lib64
-- INSTALL_BIN_DIR ................ : /home/user/dev/deliveries/rmol-99.99.99/bin
-- INSTALL_INCLUDE_DIR ............ : /home/user/dev/deliveries/rmol-99.99.99/include
-- INSTALL_DATA_DIR ............... : /home/user/dev/deliveries/rmol-99.99.99/share
-- INSTALL_SAMPLE_DIR ............. : /home/user/dev/deliveries/rmol-99.99.99/share/rmol/samples
-- INSTALL_DOC .................... : ON
-- 
-- ----------------------------------
-- ---   Packaging Configuration  ---
-- ----------------------------------
-- CPACK_PACKAGE_CONTACT .......... : Denis Arnaud <denis_arnaud - at - users dot sourceforge dot net>
-- CPACK_PACKAGE_VENDOR ........... : Denis Arnaud
-- CPACK_PACKAGE_VERSION .......... : 99.99.99
-- CPACK_PACKAGE_DESCRIPTION_FILE . : /home/user/dev/sim/rmol/rmolgithub/README
-- CPACK_RESOURCE_FILE_LICENSE .... : /home/user/dev/sim/rmol/rmolgithub/COPYING
-- CPACK_GENERATOR ................ : TBZ2
-- CPACK_DEBIAN_PACKAGE_DEPENDS ... : 
-- CPACK_SOURCE_GENERATOR ......... : TBZ2;TGZ
-- CPACK_SOURCE_PACKAGE_FILE_NAME . : rmol-99.99.99
-- 
-- ---------------------------------
-- ---     External libraries    ---
-- ---------------------------------
-- 
-- * Boost:
--   - Boost_VERSION .............. : 104600
--   - Boost_LIB_VERSION .......... : 1_46
--   - Boost_HUMAN_VERSION ........ : 1.46.0
--   - Boost_INCLUDE_DIRS ......... : /usr/include
--   - Boost required components .. : program_options;date_time;iostreams;serialization;filesystem;unit_test_framework;python
--   - Boost required libraries ... : optimized;/usr/lib64/libboost_iostreams-mt.so;debug;/usr/lib64/libboost_iostreams-mt.so;optimized;/usr/lib64/libboost_serialization-mt.so;debug;/usr/lib64/libboost_serialization-mt.so;optimized;/usr/lib64/libboost_filesystem-mt.so;debug;/usr/lib64/libboost_filesystem-mt.so;optimized;/usr/lib64/libboost_date_time-mt.so;debug;/usr/lib64/libboost_date_time-mt.so;optimized;/usr/lib64/libboost_program_options-mt.so;debug;/usr/lib64/libboost_program_options-mt.so;optimized;/usr/lib64/libboost_unit_test_framework-mt.so;debug;/usr/lib64/libboost_unit_test_framework-mt.so;optimized;/usr/lib64/libboost_python-mt.so;debug;/usr/lib64/libboost_python-mt.so
-- 
-- * MySQL:
--   - MYSQL_VERSION .............. : 5.5.14
--   - MYSQL_INCLUDE_DIR .......... : /usr/include/mysql
--   - MYSQL_LIBRARIES ............ : /usr/lib64/mysql/libmysqlclient.so
-- 
-- * SOCI:
--   - SOCI_VERSION ............... : 3.0.0
--   - SOCI_INCLUDE_DIR ........... : /usr/include/soci
--   - SOCIMYSQL_INCLUDE_DIR ...... : /usr/include/soci
--   - SOCI_LIBRARIES ............. : /usr/lib64/libsoci_core.so
--   - SOCIMYSQL_LIBRARIES ........ : /usr/lib64/libsoci_mysql.so
-- 
-- * StdAir:
--   - STDAIR_VERSION ............. : 0.37.1
--   - STDAIR_BINARY_DIRS ......... : /home/user/dev/deliveries/stdair-0.37.1/bin
--   - STDAIR_EXECUTABLES ......... : stdair
--   - STDAIR_LIBRARY_DIRS ........ : /home/user/dev/deliveries/stdair-0.37.1/lib64
--   - STDAIR_LIBRARIES ........... : stdairlib;stdairuicllib
--   - STDAIR_INCLUDE_DIRS ........ : /home/user/dev/deliveries/stdair-0.37.1/include
--   - STDAIR_SAMPLE_DIR .......... : /home/user/dev/deliveries/stdair-0.37.1/share/stdair/samples
-- 
-- Change a value with: cmake -D<Variable>=<Value>
-- =============================================================
-- 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/user/dev/sim/rmol/rmolgithub/build
>>>>>>> 0.24

\endverbatim

It is recommended that you check if your library has been compiled and
linked properly and works as expected. To do so, you should execute
the testing process <tt>`make check'</tt>. As a result, you should
obtain a similar report:
\verbatim

<<<<<<< HEAD
[...]

Making check in test
make[1]: Entering directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test'
Making check in rmol
make[2]: Entering directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test/rmol'
make[3]: Entering directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test/rmol'
make  OptimiseTestSuite SimulateTestSuite ForecasterTestSuite UnconstrainerTestSuite bomsforforecaster
make[4]: Entering directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test/rmol'

[...]

make[4]: Entering directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test/rmol'
OptimiseTestSuite::testOptimiseMC. : OK
OptimiseTestSuite::testOptimiseDP. : OK
OptimiseTestSuite::testOptimiseEMSR. : OK
OptimiseTestSuite::testOptimiseEMSRa. : OK
OptimiseTestSuite::testOptimiseEMSRb. : OK
OptimiseTestSuite::testOptimiseEMSRaWithSU. : OK

OK (6 tests)

[...]

UnconstrainerTestSuite::testUnconstrainingByEM. : OK

OK (1 tests)

PASS: UnconstrainerTestSuite
==================
All 4 tests passed
==================
make[4]: Leaving directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test/rmol'

[...]

==================
All 0 tests passed
==================
make[3]: Leaving directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test'
make[2]: Leaving directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test'
make[1]: Leaving directory `/home/dan/dev/rmol/rmolsvn/trunk/rmol/test'
make[1]: Entering directory `/home/dan/dev/sim/rmolsvn/trunk/rmol'
make[1]: Nothing to be done for `check-am'.
make[1]: Leaving directory `/home/dan/dev/sim/rmolsvn/trunk/rmol'
=======
[  0%] Built target hdr_cfg_rmol
[  0%] Built target hdr_cfg_airrac
[ 30%] Built target airraclib
[ 86%] Built target rmollib
[ 90%] Built target BOMsForForecasterTesttst
[ 93%] Built target UnconstrainerTesttst
[ 96%] Built target ForecasterTesttst
[100%] Built target OptimiseTesttst
Scanning dependencies of target check_rmoltst
Test project /home/user/dev/sim/rmol/rmolgithub/build/test/rmol
    Start 1: UnconstrainerTesttst
1/4 Test #1: UnconstrainerTesttst .............   Passed    0.04 sec
    Start 2: ForecasterTesttst
2/4 Test #2: ForecasterTesttst ................   Passed    0.04 sec
    Start 3: OptimiseTesttst
3/4 Test #3: OptimiseTesttst ..................   Passed    0.44 sec
    Start 4: BOMsForForecasterTesttst
4/4 Test #4: BOMsForForecasterTesttst .........   Passed    0.02 sec

100% tests passed, 0 tests failed out of 4

Total Test time (real) =   0.78 sec
[100%] Built target check_rmoltst
Scanning dependencies of target check
[100%] Built target check
>>>>>>> 0.24

\endverbatim

Check if all the executed tests PASSED. If not, please contact us by filling
a <a href="https://sourceforge.net/apps/trac/rmol/newticket">bug-report</a>.

Finally, you should install the compiled and linked library, include files
and (optionally) HTML and PDF documentation by typing:

\verbatim
make install
\endverbatim

Depending on the \c PREFIX settings during configuration, you might need
the root (administrator) access to perform this step.

Eventually, you might invoke the following command

\verbatim
make clean
\endverbatim

to remove all files created during compilation process, or even

\verbatim
<<<<<<< HEAD
make distclean
\endverbatim

to remove all files generated by the \c `configure' script.
=======
cd ~/dev/sim/rmolgit
rm -rf build && mkdir build
cd build
\endverbatim

to remove everything.
>>>>>>> 0.24

*/
