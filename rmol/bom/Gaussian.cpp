
// //////////////////////////////////////////////////////////////////////
// Import section
// //////////////////////////////////////////////////////////////////////
// RMOL
#include <rmol/bom/Gaussian.hpp>

namespace RMOL {

  // //////////////////////////////////////////////////////////////////////
  Gaussian::Gaussian (const FldDistributionParameters& iParams)
    : _seed (42u), _generator (42u),
      _normalDistribution (iParams.getMean(), iParams.getStandardDeviation()),
      _normalDistributionGenerator (_generator, _normalDistribution) {
    init();
  }
  
  // //////////////////////////////////////////////////////////////////////
  void Gaussian::init() {
  }

  // //////////////////////////////////////////////////////////////////////
  Gaussian::~Gaussian() {
    // Release the memory for the random generator
  }
  
  // //////////////////////////////////////////////////////////////////////
  double Gaussian::getMean() const {
    return _normalDistribution.mean();
  }
  
  // //////////////////////////////////////////////////////////////////////
  double Gaussian::getStandardDeviation() const {
    return _normalDistribution.sigma();
  }

  // //////////////////////////////////////////////////////////////////////
  double Gaussian::getVariance() const {
    return (_normalDistribution.sigma() * _normalDistribution.sigma());
  }

  // //////////////////////////////////////////////////////////////////////
  double Gaussian::generateVariate() {
    const double result = _normalDistributionGenerator();
    return result;
  }

}
